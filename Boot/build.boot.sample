(set-env!
  :source-paths   #{"src"}         ;; compiled by cljs task
  :resource-paths #{"resources"}   ;; copied to the target dir by target task
  :dependencies '[[org.clojure/clojure "1.8.0"]
                  [org.clojure/clojurescript "1.9.229"]
                  [adzerk/boot-cljs "2.0.0" :scope "test"]         ;; cljs source complie 
                  [adzerk/boot-cljs-repl "0.3.3" :scope "test"]    ;; add bREPL
                  [org.clojure/tools.nrepl "0.2.13" :scope "test"] ;; needed by bREPL 
                  [com.cemerick/piggieback "0.2.1" :scope "test"]  ;; needed by bREPL 
                  [weasel "0.7.0" :scope "test"]                   ;; needed by bREPL
                  [adzerk/boot-reload "0.5.1" :scope "test"]       ;; live reload for browser
                  [philoskim/debux "0.2.1"] ])

(require
  '[adzerk.boot-cljs      :refer [cljs]]
  '[adzerk.boot-cljs-repl :refer [cljs-repl start-repl]]
  '[adzerk.boot-reload    :refer [reload]])

(deftask prod []
  (comp (cljs :ids #{"main"}
              :optimizations :simple)
        (cljs :ids #{"renderer"}
              :optimizations :advanced)))

(deftask dev []
  (comp ;; Audio feedback about warnings etc. =======================
        (speak)
        (watch)
        ;; Inject REPL and reloading code into renderer build =======
        (cljs-repl :ids #{"renderer"})
        (reload    :ids #{"renderer"}
                   :ws-host "localhost"
                   :on-jsload 'app.renderer/init
                   :target-path "target")
        ;; Compile renderer =========================================
        (cljs      :ids #{"renderer"})
        ;; Compile JS for main process ==============================
        ;; path.resolve(".") which is used in CLJS's node shim
        ;; returns the directory `electron` was invoked in and
        ;; not the directory our main.js file is in.
        ;; Because of this we need to override the compilers `:asset-path option`
        ;; See http://dev.clojure.org/jira/browse/CLJS-1444 for details.
        (cljs      :ids #{"main"}
                   :compiler-options {:asset-path "target/main.out"
                                      :closure-defines {'app.main/dev? true}})
        (target)))
